from aiogram import Dispatcher, types
from commands.db import url_name, get_balance, getads
from decimal import Decimal
from assets.antispam import antispam
from commands.main import win_luser
from commands.basic.ore import db
import commands.basic.ore.dig
from assets.transform import transform_int as tr


@antispam
async def sellbtc(message: types.Message):
    user_id = message.from_user.id
    btc = await db.getbtc(user_id)
    url = await url_name(user_id)
    win, lose = await win_luser()

    try:
        summ_btc = int(message.text.split()[2])
    except:
        summ_btc = btc
    summ_btc = Decimal(summ_btc)
    btc = Decimal(btc)

    kurs = await db.getkurs()
    summ = summ_btc * kurs

    if btc >= summ_btc:
        if btc - summ_btc >= 0 and summ_btc > 0:
            await db.sellbtc_db(summ, summ_btc, user_id)
            await message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ {tr(summ_btc)} BTC –∑–∞ {tr(summ)}$ {win}')
        else:
            await message.answer(f'{url}, –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –∂–µ –Ω—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC {lose}')
    else:
        await message.answer(f'{url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ BTC {lose}')


@antispam
async def buybtc(message: types.Message):
    user_id = message.from_user.id
    balance = await get_balance(user_id)
    url = await url_name(user_id)
    win, lose = await win_luser()

    try:
        summ_btc = int(message.text.split()[2])
    except:
        await message.answer(f'{url}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {lose}')
        return

    summ_btc = Decimal(summ_btc)

    kurs = await db.getkurs()
    summ = summ_btc * kurs

    if balance >= summ:
        if summ_btc > 0:
            await db.buybtc_db(summ, summ_btc, user_id)
            await message.answer(f'{url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {tr(summ_btc)} BTC –∑–∞ {tr(summ)}$ {win}')
        else:
            await message.answer(f'{url}, –Ω–µ–ª—å–∑—è –ø–æ–∫—É–ø–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –∂–µ –Ω—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC {lose}')
    else:
        await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ BTC {lose}')


@antispam
async def btc_kurs(message: types.Message):
    user_id = message.from_user.id
    url = await url_name(user_id)
    kurs = await db.getkurs()
    ads = await getads(message)
    await message.answer(f'{url}, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫—É—Ä—Å 1 BTC —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç - {tr(kurs)}$ üåê\n\n{ads}', disable_web_page_preview=True)


@antispam
async def rrating_cmd(message: types.Message):
    user_id = message.from_user.id
    url = await url_name(user_id)
    r = await db.getrrating(message)
    await message.answer(f'''{url}, –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ {tr(r)}üëë''', disable_web_page_preview=True)


@antispam
async def sellrating(message: types.Message):
    user_id = message.from_user.id
    r = await db.getrrating(message)
    url = await url_name(user_id)
    win, lose = await win_luser()

    try:
        summ_r = int(message.text.split()[2])
    except:
        summ_r = r

    summ_r = Decimal(summ_r)

    kurs = 100_000_000  # —Å—É–º–º–∞ –∑–∞ 1 —Ä–µ–π—Ç–∏–Ω–≥
    summ = summ_r * kurs

    if r >= summ_r:
        if r - summ_r >= 0 and summ_r > 0:
            await db.sellrrating_db(summ, summ_r, user_id)
            await message.answer(f'{url}, –≤—ã –ø–æ–Ω–∏–∑–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ {tr(summ_r)}üëë –∑–∞ {tr(summ)}$ {win}')
        else:
            await message.answer(f'{url}, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å {lose}')
    else:
        await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –µ–≥–æ –ø—Ä–æ–¥–∞–∂–∏ {lose}')


@antispam
async def buy_ratting(message: types.Message):
    user_id = message.from_user.id
    balance = await get_balance(user_id)
    url = await url_name(user_id)
    win, lose = await win_luser()

    try:
        r_summ = int(message.text.split()[1])
    except:
        await message.answer(f'{url},  –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {lose}')
        return

    r_summ = Decimal(r_summ)
    kurs = 150_000_000  # —Å—Ç–æ–∏–º–æ—Å—Ç—å 1 —Ä–µ–π—Ç–∏–Ω–≥–∞
    summ = r_summ * kurs

    if balance >= summ:
        if r_summ > 0:
            await db.buyratting_db(summ, r_summ, user_id)
            await message.answer(f'{url}, –≤—ã –ø–æ–≤—ã—Å–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ {tr(r_summ)}üëë –∑–∞ {tr(summ)}$ {win}')
        else:
            await message.answer(f'{url}, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {lose}')
    else:
        await message.answer(f'{url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ {lose}')


def reg(dp: Dispatcher):
    dp.register_message_handler(sellbtc, lambda message: message.text.lower().startswith('–ø—Ä–æ–¥–∞—Ç—å –±–∏—Ç–∫–æ–∏–Ω'))
    dp.register_message_handler(buybtc, lambda message: message.text.lower().startswith('–∫—É–ø–∏—Ç—å –±–∏—Ç–∫–æ–∏–Ω'))
    dp.register_message_handler(btc_kurs, lambda message: message.text.lower().startswith('–∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞'))
    dp.register_message_handler(rrating_cmd, lambda message: message.text.lower() == '—Ä–µ–π—Ç–∏–Ω–≥')
    dp.register_message_handler(buy_ratting, lambda message: message.text.lower().startswith('—Ä–µ–π—Ç–∏–Ω–≥'))
    dp.register_message_handler(sellrating, lambda message: message.text.lower().startswith('–ø—Ä–æ–¥–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥'))

    commands.basic.ore.dig.reg(dp)
